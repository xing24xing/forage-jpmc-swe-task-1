From 879221fec2b863d37d5b493f02a530a8098ef6ef Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Wed, 1 Mar 2023 00:11:51 +1100
Subject: [PATCH 1/2] Re-add sample unit test

---
 client_test.py | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)
 create mode 100644 client_test.py

diff --git a/client_test.py b/client_test.py
new file mode 100644
index 0000000..af2bf26
--- /dev/null
+++ b/client_test.py
@@ -0,0 +1,25 @@
+import unittest
+from client3 import getDataPoint
+
+class ClientTest(unittest.TestCase):
+  def test_getDataPoint_calculatePrice(self):
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+
+  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+
+
+  """ ------------ Add more unit tests ------------ """
+
+
+
+if __name__ == '__main__':
+    unittest.main()
-- 
2.45.2.windows.1


From 29b79a6662ea5041dd76d04c14167598c93ef63c Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Tue, 28 Feb 2023 18:41:51 +0530
Subject: [PATCH 2/2] Merge remote-tracking branch 'origin/main'

# Conflicts:
#	client_test.py
---
 client_test.py | 89 +++++++++++++++++++++++++++++---------------------
 1 file changed, 52 insertions(+), 37 deletions(-)

diff --git a/client_test.py b/client_test.py
index 8eb02d5..c065528 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,42 +1,57 @@
 import unittest
-from client3 import getDataPoint,getRatio
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-    expected_results = [
-      ('ABC', 120.48, 121.2, (120.48 + 121.2) / 2),
-      ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
-    ]
-    for quote, expected in zip(quotes, expected_results):
-      stock, bid_price, ask_price, price = getDataPoint(quote)
-      self.assertEqual((stock, bid_price, ask_price, price), expected)
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-    expected_results = [
-      ('ABC', 120.48, 119.2, (120.48 + 119.2) / 2),
-      ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
-    ]
-
-    for quote, expected in zip(quotes, expected_results):
-      stock, bid_price, ask_price, price = getDataPoint(quote)
-      self.assertEqual((stock, bid_price, ask_price, price), expected)
-
-  """ ------------ Add more unit tests ------------ """
-
-  def test_getRatio(self):
-    self.assertEqual(getRatio(100, 200), 0.5)
-    self.assertEqual(getRatio(200, 100), 2)
-    self.assertEqual(getRatio(0, 100), 0)
-    self.assertEqual(getRatio(100, 0), float('inf'))
+
+    def test_getDataPoint_calculatePrice(self):
+        # Arrange
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        expected_results = [
+            ('ABC', 120.48, 121.2, (120.48 + 121.2) / 2),  # 120.84
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)  # 119.775
+        ]
+
+        # Act & Assert
+        for quote, expected in zip(quotes, expected_results):
+            result = getDataPoint(quote)
+            self.assertEqual(result, expected)
+
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        # Arrange
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        expected_results = [
+            ('ABC', 120.48, 119.2, (120.48 + 119.2) / 2),  # 119.84
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)  # 119.775
+        ]
+
+        # Act & Assert
+        for quote, expected in zip(quotes, expected_results):
+            result = getDataPoint(quote)
+            self.assertEqual(result, expected)
+
+    def test_getRatio(self):
+        # Arrange
+        test_cases = [
+            (100, 200, 0.5),
+            (200, 100, 2),
+            (0, 100, 0),
+            (100, 0, float('inf'))  # Assuming division by zero returns infinity
+        ]
+
+        # Act & Assert
+        for price_a, price_b, expected_ratio in test_cases:
+            result = getRatio(price_a, price_b)
+            self.assertEqual(result, expected_ratio)
+
 if __name__ == '__main__':
     unittest.main()
-- 
2.45.2.windows.1

